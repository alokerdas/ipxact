//
// Counter Example
//
field count_field { // Anonymous Generic Counter definition.
  hw = r; sw = rw; rclr; counter;
  desc = "Number of certain packet type seen";
};
reg gige_pkt_count_reg {
  count_field port0[31:24];
  count_field port1[23:16];
  count_field port2[15:8];
  count_field port3[7:0];
};
reg spi4_pkt_count_reg {
  count_field port0[31:16];
  count_field port1[15:0];
  port0->threshold = 16'hCFFF;
  port1->threshold = 16'hCFFF;
};
reg vc_pkt_count_reg {
  count_field vc_count[30:0];
  field { desc="VC is Active"; stickybit; } active;
  active->reset = 1'b1;
  vc_count->reset = 31'h0;
};
addrmap some_register_map {
  name = "RDL Example Registers";
  desc = "This address map contains some example registers to show how RDL can be utilized in various situations.";
  //
  // This register is a inline register definition.
  // It defines a simple ID register. No flip-flop is implemented
  //
  reg chip_id {
    name = "This chip part number and revision #";
    desc = "This register contains the part # and revision # for XYZ ASIC";
    field {
      hw = w; // This combination of attributes creates an input port for
      sw = r; // hardware to set the part num external to the reg block
      desc = "This field represents the chips part number";
    } part_num[31:4] = 28'h12_34_56_7; // Verilog Style number with _'s
    field {
      hw = na; // This combination creates the ID num as a constant internal
      sw = r; // to the reg block
      desc = "This field represents the chips revision number";
    } rev_num[3:0] = 4'b00_01; // Verilog Style number with _'s
  }; // End chip_id register definition
  // Create an Instance of CHIP_ID type called chip_id_reg at Addr=0;
  external chip_id chip_id_reg @0x0000;
  serdes_link_status_reg link_status; // Instance a reg. Auto Address
  myReg myRegInst @0x0010; // This instance starts at 0x10
  spi4_pkt_count_reg spi4_pkt_count @0x0020;
  gige_pkt_count_reg gige_pkt_count_reg;
  // Create 8 Instances of Fifo Reg File Starting at Address=0x100
  fifoRfile fifo_port[8] @0x100 += 0x10;
  external vc_pkt_count_reg vc_pkt_count[256] @0x1000 +=0x10;
};
