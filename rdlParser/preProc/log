print "//=========================================================================\n";
print "//\n";
print "// Program : generic_example.rdl\n";
print "// Language : Register Description Language (RDL)\n";
print "// Purpose : This is a generic example designed to show a number of the\n";
print "// RDL Language Features...\n";
print "//\n";
print "//=========================================================================\n";
print "signal gen_reset_signal_type { // Define a generic reset signal type\n";
print "  name=\"Generic Reset Signal\";\n";
print "  desc=\"This is a generic reset signal used to reset\";\n";
print "};\n";
print "gen_reset_signal_type generic_reset; // Instance the Generic Reset Signal\n";
print "//\n";
print "// This example shows the concept of a register file\n";
print "// A register file is a group of registers that belong together...\n";
print "// Now we can easily instance multiple fifo status registers very easily...\n";
print "//\n";
print "regfile fifoRfile {\n";
print "  reg pointerReg { field { we; hwmask;} data[31:0]; };\n";
print "  reg fifoStatusReg {\n";
print "    field {} full;\n";
print "    field {} empty;\n";
print "    field {} almost_empty[4:4];\n";
print "    field {} almost_full[5:5];\n";
print "    full->reset = 1'b0;\n";
print "    full->resetsignal = generic_reset;\n";
print "    // Just the full signal uses generic reset. Others use reset...\n";
print "    empty->reset = 1'b1;\n";
print "    almost_empty->reset = 1'b1;\n";
print "    almost_full ->reset = 1'b0;\n";
print "  };\n";
print "  pointerReg head; // Define a register pointing to the head of the fifo\n";
print "  head->resetsignal = generic_reset;\n";
print "  // Assign an alternate reset to register head\n";
print "  pointerReg tail; // Define a register pointing to the tail of a fifo\n";
print "  fifoStatusReg status; // Define a register for the Fifo's Status\n";
print "};\n";
print "// This example shows using perl to do anything you desire\n";
print "field myField {\n";
print "  desc = \"My example 2bit status field\";\n";
print "  rclr; // Read to Clear\n";
print "};\n";
print "// An example of Apache's ASP standard for embedding Perl\n";
print "reg myReg {\n";
   $num_fields = 16;
  for( $i = 0; $i < $num_fields*2; $i += 2 ) { 
print "    myField data"; print $i/2; print " ["; print $i+1; print ":"; print $i; print "];\n";
print "    data"; print $i/2; print "->reset = 2'd"; print $i/2%4; print ";\n";
   } 
print "};\n";
print "//\n";
print "// Enumeration Example\n";
print "//\n";
print "enum link_status_enum {\n";
print "  not_present = 4'd0 { desc = \"No link peer is currently detected\"; };\n";
print "  training = 4'd1 { desc = \"Link is currently training\"; };\n";
print "  snooze = 4'd5 { desc = \"Link is in a partial low power state\"; };\n";
print "  sleep = 4'd6 { desc = \"Link is a Full low power state\"; };\n";
print "  wake = 4'd7 { desc = \"Link is waking up from snooze or sleep state\"; };\n";
print "  active = 4'd10 { desc = \"Link is operating normally\"; };\n";
print "};\n";
print "field link_status_field {\n";
print "  hw = rw;\n";
print "  sw = r;\n";
print "  desc = \"Status of a Serdes Link\";\n";
print "  encode = link_status_enum;\n";
print "  fieldwidth = 4;\n";
print "};\n";
print "reg serdes_link_status_reg {\n";
print "  link_status_field port0; // Instance 4 ports of Link Status\n";
print "  link_status_field port1;\n";
print "  link_status_field port2;\n";
print "  link_status_field port3;\n";
print "};\n";
print "//\n";
print "// Counter Example\n";
print "//\n";
print "field count_field { // Anonymous Generic Counter definition.\n";
print "  hw = r; sw = rw; rclr; counter;\n";
print "  desc = \"Number of certain packet type seen\";\n";
print "};\n";
print "reg gige_pkt_count_reg {\n";
print "  count_field port0[31:24];\n";
print "  count_field port1[23:16];\n";
print "  count_field port2[15:8];\n";
print "  count_field port3[7:0];\n";
print "};\n";
print "reg spi4_pkt_count_reg {\n";
print "  count_field port0[31:16];\n";
print "  count_field port1[15:0];\n";
print "  port0->threshold = 16'hCFFF;\n";
print "  port1->threshold = 16'hCFFF;\n";
print "};\n";
print "reg vc_pkt_count_reg {\n";
print "  count_field vc_count[30:0];\n";
print "  field { desc=\"VC is Active\"; stickybit; } active;\n";
print "  active->reset = 1'b1;\n";
print "  vc_count->reset = 31'h0;\n";
print "};\n";
print "addrmap some_register_map {\n";
print "  name = \"RDL Example Registers\";\n";
print "  desc = \"This address map contains some example registers to show how RDL can be utilized in various situations.\";\n";
print "  //\n";
print "  // This register is a inline register definition.\n";
print "  // It defines a simple ID register. No flip-flop is implemented\n";
print "  //\n";
print "  reg chip_id {\n";
print "    name = \"This chip part number and revision \";\n";
print "    desc = \"This register contains the part  and revision  for XYZ ASIC\";\n";
print "    field {\n";
print "      hw = w; // This combination of attributes creates an input port for\n";
print "      sw = r; // hardware to set the part num external to the reg block\n";
print "      desc = \"This field represents the chips part number\";\n";
print "    } part_num[31:4] = 28'h12_34_56_7; // Verilog Style number with _'s\n";
print "    field {\n";
print "      hw = na; // This combination creates the ID num as a constant internal\n";
print "      sw = r; // to the reg block\n";
print "      desc = \"This field represents the chips revision number\";\n";
print "    } rev_num[3:0] = 4'b00_01; // Verilog Style number with _'s\n";
print "  }; // End chip_id register definition\n";
print "  // Create an Instance of CHIP_ID type called chip_id_reg at Addr=0;\n";
print "  external chip_id chip_id_reg \@0x0000;\n";
print "  serdes_link_status_reg link_status; // Instance a reg. Auto Address\n";
print "  //myReg myRegInst \@0x0010; // This instance starts at 0x10\n";
print "  spi4_pkt_count_reg spi4_pkt_count \@0x0020;\n";
print "  gige_pkt_count_reg gige_pkt_count_reg;\n";
print "  // Create 8 Instances of Fifo Reg File Starting at Address=0x100\n";
print "  fifoRfile fifo_port[8] \@0x100 += 0x10;\n";
print "  external vc_pkt_count_reg vc_pkt_count[256] \@0x1000 +=0x10;\n";
print "};\n";
